/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package universidadulp.Vistas;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import universidadulp.AccesoADatos.AlumnoData;
import universidadulp.AccesoADatos.Conexion;
import universidadulp.AccesoADatos.InscripcionData;
import universidadulp.AccesoADatos.MateriaData;
import universidadulp.Entidades.Alumno;
import universidadulp.Entidades.Inscripcion;
import universidadulp.Entidades.Materia;

/**
 *
 * @author jero
 */
public class Notas extends javax.swing.JInternalFrame {

    AlumnoData alumnoDB = new AlumnoData();
    MateriaData materiaDB = new MateriaData();
    private Connection con;

    /**
     * Creates new form Notas
     */
    public Notas() {
        initComponents();
        con = Conexion.getConnection();
        llenarCombo();
        tabla();

    }

    private void llenarCombo() {
        String sql = "select idAlumno, nombre, apellido from alumno order by idAlumno ASC";

        try {
            PreparedStatement ps = con.prepareStatement(sql);

            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                String idAlumno = String.valueOf(rs.getInt("idAlumno"));
                String nombre = rs.getString("nombre");
                String apellido = rs.getString("apellido");
                String dato = idAlumno + " " + nombre + " " + apellido;
                jcbNotas.addItem(dato);
            }
        } catch (SQLException ex) {
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jcbNotas = new javax.swing.JComboBox<>();
        jbGuardar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtTablaNotas = new javax.swing.JTable();

        setClosable(true);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        jLabel1.setForeground(java.awt.Color.black);
        jLabel1.setText("Carga de notas");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabel5.setForeground(java.awt.Color.black);
        jLabel5.setText("Seleccione un alumno:");

        jcbNotas.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jcbNotas.setForeground(java.awt.Color.black);
        jcbNotas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbNotas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbNotasActionPerformed(evt);
            }
        });

        jbGuardar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbGuardar.setForeground(java.awt.Color.black);
        jbGuardar.setText("Guardar");
        jbGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGuardarActionPerformed(evt);
            }
        });

        jtTablaNotas.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jtTablaNotas.setForeground(java.awt.Color.black);
        jtTablaNotas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Codigo", "Nombre", "Nota"
            }
        ));
        jScrollPane1.setViewportView(jtTablaNotas);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(165, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(162, 162, 162))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(jcbNotas, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(198, 198, 198)
                        .addComponent(jbGuardar)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jcbNotas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jbGuardar)
                .addGap(38, 38, 38))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboAlumnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboAlumnoActionPerformed
        llenarCombo();

    }//GEN-LAST:event_jComboAlumnoActionPerformed

    private void jbguardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbguardarActionPerformed
        DefaultTableModel modelo = new DefaultTableModel();
        PreparedStatement ps = null;
        try {
            Connection con = Conexion.getConnection();
            //obtener id alumno y la nota
            double nota = Double.parseDouble(jtNota.getText());
            int idAlumno = Integer.parseInt(jtCodigo.getText());
            //obtener el id de la materia a partir del campo de texto
            int idMateria = Integer.parseInt(jtMateria.getText());
            //consultar el sql para obtener nombre de materia
            String sql = "SELECT nombre FROM materia where idMateria =?";
            PreparedStatement psmateria = con.prepareStatement(sql);
            psmateria.setInt(1, idMateria);
            ResultSet rsMateria = psmateria.executeQuery();
            String nombreMateria = "";
            if (rsMateria.next()) {
                nombreMateria = rsMateria.getString("nombre");
            } else {
                JOptionPane.showMessageDialog(null, "ID de materia invalido");
                return;
            }
            //inserccion de datos a la tabla 
            String sql2 = "INSERT INTO inscripcion (idAlumno, idMteria, nota) VALUES (?, ?, ?)";
            PreparedStatement psinscripcion = con.prepareStatement(sql2);

            ps.setInt(1, idAlumno);
            ps.setString(2, nombreMateria);
            ps.setDouble(3, nota);
            psinscripcion.executeUpdate();
            JOptionPane.showMessageDialog(null, "Producto guardado");
            Object[] fila = new Object[3];
            fila[0] = jtCodigo.getText();
            fila[1] = jtMateria.getText();
            fila[2] = jtNota.getText();
            modelo.addRow(fila);

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error al guardar ");
        }
    }//GEN-LAST:event_jbguardarActionPerformed

    private void jbsalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbsalirActionPerformed
        dispose();
    }//GEN-LAST:event_jbsalirActionPerformed

    private void jtCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtCodigoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtCodigoActionPerformed

    private void jTablaNotasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablaNotasMouseClicked

    }//GEN-LAST:event_jTablaNotasMouseClicked
    private void tabla() {

        try {
            DefaultTableModel modelo = new DefaultTableModel();
            jtTablaNotas.setModel(modelo);
            PreparedStatement ps = null;
            ResultSet rs = null;
            Connection con = Conexion.getConnection();

            String sql = "SELECT inscripcion.idalumno, materia.nombre AS nombre_materia, inscripcion.nota\n"
                    + "FROM inscripcion\n"
                    + "INNER JOIN materia ON inscripcion.idmateria = materia.idmateria;";
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();
            ResultSetMetaData rsMd = rs.getMetaData();
            int cantidadColumnas = rsMd.getColumnCount();
            modelo.addColumn("CODIGO");
            modelo.addColumn("NOMBRE_MATERIA");
            modelo.addColumn("NOTA");
            while (rs.next()) {
                Object[] filas = new Object[cantidadColumnas];
                for (int i = 0; i < cantidadColumnas; i++) {
                    filas[i] = rs.getObject(i + 1);
                }
                modelo.addRow(filas);

            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al cargar tabla de datos");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbGuardar;
    private javax.swing.JComboBox<String> jcbNotas;
    private javax.swing.JTable jtTablaNotas;
    // End of variables declaration//GEN-END:variables

}
